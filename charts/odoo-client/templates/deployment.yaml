apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "odoo-client.fullname" . }}
  labels:
    {{- include "odoo-client.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "odoo-client.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "odoo-client.selectorLabels" . | nindent 8 }}
    spec:
      # Image pull secrets pour registry priv√©
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Init container pour attendre PostgreSQL Bitnami
      initContainers:
      - name: wait-for-db
        image: postgres:15-alpine
        command:
          - sh
          - -c
          - |
            echo "üîç Waiting for PostgreSQL to be ready..."
            until pg_isready \
              -h {{ include "odoo-client.fullname" . }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local \
              -p 5432 \
              -U {{ .Values.postgresql.auth.username }} \
              -d {{ .Values.postgresql.auth.database }}; do
              echo "‚è≥ PostgreSQL is unavailable - sleeping..."
              sleep 5
            done
            echo "‚úÖ PostgreSQL is ready!"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretRef:
              name: {{ include "odoo-client.fullname" . }}-postgresql
              key: password
      
      containers:
      - name: odoo
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8069
          protocol: TCP
          
        # Variables d'environnement pour Odoo avec PostgreSQL Bitnami
        env:
        - name: HOST
          value: {{ include "odoo-client.fullname" . }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local
        - name: PORT
          value: "5432"
        - name: USER
          value: {{ .Values.postgresql.auth.username | quote }}
        - name: PASSWORD
          valueFrom:
            secretRef:
              name: {{ include "odoo-client.fullname" . }}-postgresql
              key: password
        - name: DB_NAME
          value: {{ .Values.postgresql.auth.database | quote }}
        
        # Variables Odoo suppl√©mentaires (optionnel)
        - name: ODOO_DB_HOST
          value: {{ include "odoo-client.fullname" . }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local
        - name: ODOO_DB_PORT
          value: "5432"
        - name: ODOO_DB_USER
          value: {{ .Values.postgresql.auth.username | quote }}
        - name: ODOO_DB_PASSWORD
          valueFrom:
            secretRef:
              name: {{ include "odoo-client.fullname" . }}-postgresql
              key: password
        - name: ODOO_DB_NAME
          value: {{ .Values.postgresql.auth.database | quote }}
          
        # Autres variables Odoo personnalis√©es
        {{- if .Values.odoo.extraEnv }}
        {{- range $key, $value := .Values.odoo.extraEnv }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- end }}
          
        volumeMounts:
        - name: odoo-config
          mountPath: /etc/odoo/odoo.conf
          subPath: odoo.conf
        - name: odoo-data
          mountPath: /var/lib/odoo
          
        # Probes de sant√© optimis√©es
        livenessProbe:
          httpGet:
            path: /web/health
            port: http
            httpHeaders:
            - name: Host
              value: {{ .Values.client.domain | quote }}
          initialDelaySeconds: 180  # Plus de temps pour le d√©marrage initial
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
          successThreshold: 1
          
        readinessProbe:
          httpGet:
            path: /web/database/selector
            port: http
            httpHeaders:
            - name: Host
              value: {{ .Values.client.domain | quote }}
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 5
          successThreshold: 1
          
        # Probe de startup pour √©viter les restarts pendant l'initialisation
        startupProbe:
          httpGet:
            path: /web/database/selector
            port: http
            httpHeaders:
            - name: Host
              value: {{ .Values.client.domain | quote }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 30  # 5 minutes max pour d√©marrer
          successThreshold: 1
          
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
          
      volumes:
      - name: odoo-config
        configMap:
          name: {{ include "odoo-client.fullname" . }}-config
      - name: odoo-data
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "odoo-client.fullname" . }}-data
        {{- else }}
        emptyDir: {}
        {{- end }}
        
      # S√©lecteurs de n≈ìuds et contraintes
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      # Gestion gracieuse de l'arr√™t
      terminationGracePeriodSeconds: 60
      
      # Contexte de s√©curit√© (optionnel)
      {{- if .Values.securityContext }}
      securityContext:
        {{- toYaml .Values.securityContext | nindent 8 }}
      {{- end }}
